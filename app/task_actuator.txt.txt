  task_actuator.c (task_actuator.h, task_actuator_attribute.h) 
   Non-Blocking & Update By Time Code -> Actuator Modeling

  task_actuator_interface.c (task_actuator_interface.h)
   Non-Blocking Code

...

Proyecto: tdse-tp2_04-model_integration

-------------------------------------------------------------------
Analisis y descripcion del Codigo fuente:

task-actuator.c

tipo de datos: - char: *p_task_actuator, *p_task_actuator_
			   - uint32_t: g_task_actuator_cnt, index
               - uint32_t: g_task_actuator_tick_cnt -> volatile 
			   - task_actuator_dta_t: *p_task_actuator_dta -> const
	           - task_actuator_st_t: state -> tipo enum
	           - task_actuator_ev_t: event -> tipo enum
	           - bool b_event, b_time_update_required 
	           - task_actuator_cfg_t *p_task_actuator_cfg -> const 
	           
estructuras de datos: - task_actuator_dta_t -> es un typedef
					  - task_actuator_cfg_t -> es un typedef
				
array: - task_actuator_cfg_list[]
	   - task_actuator_dta_list[]

metodos: - task_actuator_statechart();
		 - task_actuator_init();
		 - task_actuator_update();
		 - task_actuator_statechart();
		 - LOGGER_INFO();
		 
identificadores: - task_actuator_init → nombre de la función
				 - parameters → nombre del parámetro de la función	
				 - index → variable de tipo uint32_t
				 - p_task_actuator_cfg → puntero a task_actuator_cfg_t	
			 	 - p_task_actuator_dta → puntero a task_actuator_dta_t	
			   	 - state → variable de tipo task_actuator_st_t	
				 - event → variable de tipo task_actuator_ev_t	
				 - b_event → variable de tipo bool		 
				       
---------------------------
task_actuator_attribute.h

eventos: - LED_XX_OFF
		 - EV_LED_XX_ON
		 - EV_LED_XX_NOT_BLINK
		 - EV_LED_XX_BLINK
		 - EV_LED_XX_PULSE

estados: - ST_LED_XX_OFF
		 - ST_LED_XX_OFF
		 - ST_LED_BLINK_ON
		 - ST_LED_BLINK_OFF
		 - ST_LED_XX_PULSE

tipo de datos: - uint32_t			tick;
			   - task_system_st_t	state;
		   	   - task_system_ev_t	event;
			   - bool				flag;
			   - task_system_dta_t task_system_dta; -> extern
		
estructuras de datos:
				- typedef enum task_actuator_ev {EV_LED_XX_OFF,
											   EV_LED_XX_ON,
											   EV_LED_XX_NOT_BLINK,
											   EV_LED_XX_BLINK,
											   EV_LED_XX_PULSE} task_actuator_ev_t;

				- typedef enum task_actuator_st {ST_LED_XX_OFF,
											   ST_LED_XX_ON,
											   ST_LED_XX_BLINK_ON,
											   ST_LED_XX_BLINK_OFF,
											   ST_LED_XX_PULSE} task_actuator_st_t;

				- typedef enum task_actuator_id {ID_LED_A} task_actuator_id_t;

			   - typedef struct
					{
						task_actuator_id_t	identifier;
						GPIO_TypeDef *		gpio_port;
						uint16_t			pin;
						GPIO_PinState		led_on;
						GPIO_PinState		led_off;
						uint32_t			tick_blink;
						uint32_t			tick_pulse;
					} task_actuator_cfg_t;

array: - task_actuator_dta_list[];

identificadores: - ID_LED_A -> id Enum (task_actuator_id_t)
				 - EV_LED_XX_OFF, EV_LED_XX_ON, EV_LED_XX_NOT_BLINK, EV_LED_XX_BLINK, EV_LED_XX_PULSE -> id Enum (task_actuator_ev_t)
				 - ST_LED_XX_OFF, ST_LED_XX_ON, ST_LED_XX_BLINK_ON, ST_LED_XX_BLINK_OFF, ST_LED_XX_PULSE  -> id Enum (task_actuator_st_t)
                 - identifier, gpio_port, pin, led_on, led_off, tick_blink, tick_pulse -> id de estructura (task_actuator_cfg_t)
                 - tick, state, event, flag, task_actuator_dta_t -> id de estructura

---------------------------
task_actuator_interface.h

metodo: - void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier);

identificadores: - put_event_task_actuator
			 	 - event
				 - identifier